{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface Class<T = any, F extends Array<any> = any[]> {\n  injectDependencies?: F;\n  new (...args: F): T;\n}\n\nexport interface DefaultProviderOptions<T extends Class = any> {\n  provider: T;\n  multi?: boolean;\n}\n\nexport interface UseClassProviderOptions<T extends Class = any, F extends Class = any>\n  extends DefaultProviderOptions<T> {\n  useClass: F;\n}\n\nexport interface UseValueProviderOptions<T = any, F = any> extends DefaultProviderOptions {\n  provider: T;\n  useValue: F;\n}\n\nexport interface UseExistingProviderOptions<T = any, F = any> extends DefaultProviderOptions {\n  provider: T;\n  useExisting: F;\n}\n\nexport interface UseFactoryProviderOptions<T extends Class = any, F = any, R extends Array<any> = any[]>\n  extends DefaultProviderOptions<T> {\n  useFactory: F;\n  deps?: R;\n}\n\nexport interface DefaultProviderOptionsWithDeps<R extends Array<any> = any[]> extends DefaultProviderOptions {\n  deps?: R;\n}\n\nexport type ProviderOptions<F = any, T extends Class = Class<F>> =\n  | UseClassProviderOptions\n  | UseValueProviderOptions\n  | UseExistingProviderOptions\n  | UseFactoryProviderOptions\n  | T;\n"]}